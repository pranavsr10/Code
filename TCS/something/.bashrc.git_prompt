# Adapted from code found at <https://gist.github.com/1712320> then converted to bash
_color() {
    git config --get-color "" "$1"
}

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_PREFIX="`_color green`[$reset"
GIT_PROMPT_SUFFIX="`_color green`]$reset"
GIT_PROMPT_AHEAD="`_color red`ANUM$reset"
GIT_PROMPT_BEHIND="`_color cyan`BNUM$reset"
GIT_PROMPT_MERGING="`_color 'bold magenta'`⚡︎$reset"
GIT_PROMPT_UNTRACKED="`_color yellow` NUM$reset"
GIT_PROMPT_MODIFIED="`_color 'bold red'` NUM$reset"
GIT_PROMPT_STAGED="`_color 'bold green'` NUM$reset"

# Show Git branch/tag, or name-rev if on detached head
parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
parse_git_state() {

  # Compose this value via multiple conditional appends.
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  local NUM_UNTRACKED="$(git ls-files --other --exclude-standard 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_UNTRACKED" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_UNTRACKED//NUM/$NUM_UNTRACKED}
  fi

  local NUM_MODIFIED="$(git diff --name-only 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_MODIFIED" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_MODIFIED//NUM/$NUM_MODIFIED}
  fi

  local NUM_STAGED="$(git diff --cached --name-only 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_STAGED" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_STAGED//NUM/$NUM_STAGED}
  fi

  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi

}

# If inside a Git repository, print its branch and state
git_prompt_string() {
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo -n "$(parse_git_state)$GIT_PROMPT_PREFIX`_color yellow`${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
}

# use $(git_prompt_string) in PS1?
# RPS1='$(git_prompt_string)'
